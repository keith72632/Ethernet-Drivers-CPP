
EthernetDrivers001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000033c  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004e4  080004ec  000104ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004e4  080004e4  000104ec  2**0
                  CONTENTS
  4 .ARM          00000000  080004e4  080004e4  000104ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004e4  080004ec  000104ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004e4  080004e4  000104e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004e8  080004e8  000104e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000104ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000104ec  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  000104ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000156b  00000000  00000000  00010516  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000004d5  00000000  00000000  00011a81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000c8  00000000  00000000  00011f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000090  00000000  00000000  00012020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001027  00000000  00000000  000120b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000e38  00000000  00000000  000130d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00008861  00000000  00000000  00013f0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0001c770  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000208  00000000  00000000  0001c7c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080004cc 	.word	0x080004cc

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	080004cc 	.word	0x080004cc

080001e8 <main>:
#include "gpio.h"

#define APB2    0x40023844
#define AHB1    0x40023830
int main(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b084      	sub	sp, #16
 80001ec:	af00      	add	r7, sp, #0
	uint8_t spiData[1];
	uint8_t rxData[1];
	spiData[0] = 0x00;
 80001ee:	2300      	movs	r3, #0
 80001f0:	723b      	strb	r3, [r7, #8]
	Spi::SPI_t *spi1 = (Spi::SPI_t*)0x40013000;
 80001f2:	4b0d      	ldr	r3, [pc, #52]	; (8000228 <main+0x40>)
 80001f4:	60fb      	str	r3, [r7, #12]
	spi1->spi_config(APB2, AHB1);
 80001f6:	4a0d      	ldr	r2, [pc, #52]	; (800022c <main+0x44>)
 80001f8:	490d      	ldr	r1, [pc, #52]	; (8000230 <main+0x48>)
 80001fa:	68f8      	ldr	r0, [r7, #12]
 80001fc:	f000 f844 	bl	8000288 <_ZN3Spi3spi10spi_configEmm>

	spi1->pull_ss_low();
 8000200:	68f8      	ldr	r0, [r7, #12]
 8000202:	f000 f901 	bl	8000408 <_ZN3Spi3spi11pull_ss_lowEv>
	spi1->transmit(spiData[0], 1);
 8000206:	7a3b      	ldrb	r3, [r7, #8]
 8000208:	2201      	movs	r2, #1
 800020a:	4619      	mov	r1, r3
 800020c:	68f8      	ldr	r0, [r7, #12]
 800020e:	f000 f86d 	bl	80002ec <_ZN3Spi3spi8transmitEhh>
	spi1->receive(&rxData[0], 1);
 8000212:	1d3b      	adds	r3, r7, #4
 8000214:	2201      	movs	r2, #1
 8000216:	4619      	mov	r1, r3
 8000218:	68f8      	ldr	r0, [r7, #12]
 800021a:	f000 f892 	bl	8000342 <_ZN3Spi3spi7receiveEPhh>
	spi1->pull_ss_high();
 800021e:	68f8      	ldr	r0, [r7, #12]
 8000220:	f000 f8de 	bl	80003e0 <_ZN3Spi3spi12pull_ss_highEv>

    /* Loop forever */
	for(;;);
 8000224:	e7fe      	b.n	8000224 <main+0x3c>
 8000226:	bf00      	nop
 8000228:	40013000 	.word	0x40013000
 800022c:	40023830 	.word	0x40023830
 8000230:	40023844 	.word	0x40023844

08000234 <_ZN3Rcc7APB2ENR14start_spi1_clkEv>:

#include "rcc.h"

namespace Rcc {
	void APB2ENR_t::start_spi1_clk()
	{
 8000234:	b480      	push	{r7}
 8000236:	b083      	sub	sp, #12
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
		this->SPI1EN = ENABLE;
 800023c:	687a      	ldr	r2, [r7, #4]
 800023e:	7853      	ldrb	r3, [r2, #1]
 8000240:	f043 0310 	orr.w	r3, r3, #16
 8000244:	7053      	strb	r3, [r2, #1]
	}
 8000246:	bf00      	nop
 8000248:	370c      	adds	r7, #12
 800024a:	46bd      	mov	sp, r7
 800024c:	bc80      	pop	{r7}
 800024e:	4770      	bx	lr

08000250 <_ZN3Rcc7AHB1ENR13start_clock_aEv>:
	void AHB1ENR_t::start_clock_a(void)
	{
 8000250:	b480      	push	{r7}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
		this->GPIOA_EN = 0x01;
 8000258:	687a      	ldr	r2, [r7, #4]
 800025a:	7813      	ldrb	r3, [r2, #0]
 800025c:	f043 0301 	orr.w	r3, r3, #1
 8000260:	7013      	strb	r3, [r2, #0]
	}
 8000262:	bf00      	nop
 8000264:	370c      	adds	r7, #12
 8000266:	46bd      	mov	sp, r7
 8000268:	bc80      	pop	{r7}
 800026a:	4770      	bx	lr

0800026c <_ZN3Rcc7AHB1ENR13start_clock_dEv>:

	void AHB1ENR_t::start_clock_d()
	{
 800026c:	b480      	push	{r7}
 800026e:	b083      	sub	sp, #12
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
		this->GPIOD_EN = 0x01;
 8000274:	687a      	ldr	r2, [r7, #4]
 8000276:	7813      	ldrb	r3, [r2, #0]
 8000278:	f043 0308 	orr.w	r3, r3, #8
 800027c:	7013      	strb	r3, [r2, #0]
	}
 800027e:	bf00      	nop
 8000280:	370c      	adds	r7, #12
 8000282:	46bd      	mov	sp, r7
 8000284:	bc80      	pop	{r7}
 8000286:	4770      	bx	lr

08000288 <_ZN3Spi3spi10spi_configEmm>:

#include "spi.h"

namespace Spi {
	void SPI_t::spi_config(uint32_t rcc_spi, uint32_t rcc_gpio)
	{
 8000288:	b580      	push	{r7, lr}
 800028a:	b086      	sub	sp, #24
 800028c:	af00      	add	r7, sp, #0
 800028e:	60f8      	str	r0, [r7, #12]
 8000290:	60b9      	str	r1, [r7, #8]
 8000292:	607a      	str	r2, [r7, #4]
		Rcc::APB2ENR_t *apb2 = (Rcc::APB2ENR_t*)rcc_spi;
 8000294:	68bb      	ldr	r3, [r7, #8]
 8000296:	617b      	str	r3, [r7, #20]
		apb2->start_spi1_clk();
 8000298:	6978      	ldr	r0, [r7, #20]
 800029a:	f7ff ffcb 	bl	8000234 <_ZN3Rcc7APB2ENR14start_spi1_clkEv>

		Rcc::AHB1ENR_t *ahb1 = (Rcc::AHB1ENR_t*)rcc_gpio;
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	613b      	str	r3, [r7, #16]
		ahb1->start_clock_a();
 80002a2:	6938      	ldr	r0, [r7, #16]
 80002a4:	f7ff ffd4 	bl	8000250 <_ZN3Rcc7AHB1ENR13start_clock_aEv>
		ahb1->start_clock_d();
 80002a8:	6938      	ldr	r0, [r7, #16]
 80002aa:	f7ff ffdf 	bl	800026c <_ZN3Rcc7AHB1ENR13start_clock_dEv>

		this->pin_config();
 80002ae:	68f8      	ldr	r0, [r7, #12]
 80002b0:	f000 f878 	bl	80003a4 <_ZN3Spi3spi10pin_configEv>

		//CPHA = 1, CPOL = 1, Enable Master Mode, BR[2:0] = 011: fPCLK/16, PCLK2 = 80MHz, SPI clk = 5MHz
		this->CR1 |= ( 1 << MSTR ) | ( 2 << BR );
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	f043 0214 	orr.w	r2, r3, #20
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	601a      	str	r2, [r3, #0]
		//Frame format . 0 = Most Significant Bit First, 1 = Least Significant Bit First
		this->CR1 &= ~( 1 << LSB );
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	601a      	str	r2, [r3, #0]
		//Software slave management
		this->CR1 |= ( 1 << SSI ) | ( 1 << SSM );
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	601a      	str	r2, [r3, #0]
		//Full duplex, 8 bit data
		this->CR1 &= ~(1 << RX_ONLY) & ~( 1 << DFF );
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80002e0:	68fb      	ldr	r3, [r7, #12]
 80002e2:	601a      	str	r2, [r3, #0]
	}
 80002e4:	bf00      	nop
 80002e6:	3718      	adds	r7, #24
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bd80      	pop	{r7, pc}

080002ec <_ZN3Spi3spi8transmitEhh>:

	void SPI_t::transmit(uint8_t data, uint8_t size)
	{
 80002ec:	b480      	push	{r7}
 80002ee:	b085      	sub	sp, #20
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
 80002f4:	460b      	mov	r3, r1
 80002f6:	70fb      	strb	r3, [r7, #3]
 80002f8:	4613      	mov	r3, r2
 80002fa:	70bb      	strb	r3, [r7, #2]
		2. Write the data to the Data Register
		3. After the data has been transmitted, wait for the BSY bit to reset in Status Register
		4. Clear the Overrun flag by reading DR and SR
		************************************************/

		while(!(( this->SR ) & ( 1 << 1 ))){}; //wait for the TXE bit to be set, this will indicate buffer is empty
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	689b      	ldr	r3, [r3, #8]
 8000300:	f003 0302 	and.w	r3, r3, #2
 8000304:	2b00      	cmp	r3, #0
 8000306:	d100      	bne.n	800030a <_ZN3Spi3spi8transmitEhh+0x1e>
 8000308:	e7f8      	b.n	80002fc <_ZN3Spi3spi8transmitEhh+0x10>
		this->DR = data;
 800030a:	78fa      	ldrb	r2, [r7, #3]
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	60da      	str	r2, [r3, #12]
		/*During discontinuous communications, there is a 2 APB clock period delay between the
		write operation to the SPI_DR register and BSY bit setting. As a consequence it is
		mandatory to wait first until TXE is set and then until BSY is cleared after writing the last
		data.
		*/
	    while (this->SR & 0x80) {};      /* wait for transmission done */
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	689b      	ldr	r3, [r3, #8]
 8000314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000318:	2b00      	cmp	r3, #0
 800031a:	d000      	beq.n	800031e <_ZN3Spi3spi8transmitEhh+0x32>
 800031c:	e7f8      	b.n	8000310 <_ZN3Spi3spi8transmitEhh+0x24>
		while((( this->SR ) & ( 1 << 7 ))){}; //Wait for BSY to reset, indicates that SPI is not busy
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	689b      	ldr	r3, [r3, #8]
 8000322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000326:	2b00      	cmp	r3, #0
 8000328:	d000      	beq.n	800032c <_ZN3Spi3spi8transmitEhh+0x40>
 800032a:	e7f8      	b.n	800031e <_ZN3Spi3spi8transmitEhh+0x32>

		//clear the overrun flag by reading DR and SR
		uint8_t temp = this->DR;
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	68db      	ldr	r3, [r3, #12]
 8000330:	73fb      	strb	r3, [r7, #15]
		temp = this->SR;
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	689b      	ldr	r3, [r3, #8]
 8000336:	73fb      	strb	r3, [r7, #15]
	}
 8000338:	bf00      	nop
 800033a:	3714      	adds	r7, #20
 800033c:	46bd      	mov	sp, r7
 800033e:	bc80      	pop	{r7}
 8000340:	4770      	bx	lr

08000342 <_ZN3Spi3spi7receiveEPhh>:

	void SPI_t::receive(uint8_t *data, uint8_t size)
	{
 8000342:	b480      	push	{r7}
 8000344:	b085      	sub	sp, #20
 8000346:	af00      	add	r7, sp, #0
 8000348:	60f8      	str	r0, [r7, #12]
 800034a:	60b9      	str	r1, [r7, #8]
 800034c:	4613      	mov	r3, r2
 800034e:	71fb      	strb	r3, [r7, #7]
		2. Send some Dummy data before reading the DATA
		3. Wait for the RXNE bit to Set in the status Register
		4. Read data from Data Register
		************************************************/

		while(size)
 8000350:	79fb      	ldrb	r3, [r7, #7]
 8000352:	2b00      	cmp	r3, #0
 8000354:	d021      	beq.n	800039a <_ZN3Spi3spi7receiveEPhh+0x58>
		{
			//1.
			while((( this->SR ) & ( 1 << BSY ))){};
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	689b      	ldr	r3, [r3, #8]
 800035a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800035e:	2b00      	cmp	r3, #0
 8000360:	d000      	beq.n	8000364 <_ZN3Spi3spi7receiveEPhh+0x22>
 8000362:	e7f8      	b.n	8000356 <_ZN3Spi3spi7receiveEPhh+0x14>
			//2.
			this->DR = 0x00;
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	2200      	movs	r2, #0
 8000368:	731a      	strb	r2, [r3, #12]
 800036a:	2200      	movs	r2, #0
 800036c:	735a      	strb	r2, [r3, #13]
 800036e:	2200      	movs	r2, #0
 8000370:	739a      	strb	r2, [r3, #14]
 8000372:	2200      	movs	r2, #0
 8000374:	73da      	strb	r2, [r3, #15]
			//3.
			while((( this->SR ) & ( 1 << 0 ))){};
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	689b      	ldr	r3, [r3, #8]
 800037a:	f003 0301 	and.w	r3, r3, #1
 800037e:	2b00      	cmp	r3, #0
 8000380:	d000      	beq.n	8000384 <_ZN3Spi3spi7receiveEPhh+0x42>
 8000382:	e7f8      	b.n	8000376 <_ZN3Spi3spi7receiveEPhh+0x34>
			//4.
			*data++ = this->DR;
 8000384:	68fb      	ldr	r3, [r7, #12]
 8000386:	68d9      	ldr	r1, [r3, #12]
 8000388:	68bb      	ldr	r3, [r7, #8]
 800038a:	1c5a      	adds	r2, r3, #1
 800038c:	60ba      	str	r2, [r7, #8]
 800038e:	b2ca      	uxtb	r2, r1
 8000390:	701a      	strb	r2, [r3, #0]
			size--;
 8000392:	79fb      	ldrb	r3, [r7, #7]
 8000394:	3b01      	subs	r3, #1
 8000396:	71fb      	strb	r3, [r7, #7]
		while(size)
 8000398:	e7da      	b.n	8000350 <_ZN3Spi3spi7receiveEPhh+0xe>
		}

	}
 800039a:	bf00      	nop
 800039c:	3714      	adds	r7, #20
 800039e:	46bd      	mov	sp, r7
 80003a0:	bc80      	pop	{r7}
 80003a2:	4770      	bx	lr

080003a4 <_ZN3Spi3spi10pin_configEv>:

	void SPI_t::pin_config(void)
	{
 80003a4:	b480      	push	{r7}
 80003a6:	b085      	sub	sp, #20
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
		uint32_t *gpioa_mode = (uint32_t*)0x40020000;
 80003ac:	4b0a      	ldr	r3, [pc, #40]	; (80003d8 <_ZN3Spi3spi10pin_configEv+0x34>)
 80003ae:	60fb      	str	r3, [r7, #12]
		uint32_t *gpiod_mode = (uint32_t*)0x40020C00;
 80003b0:	4b0a      	ldr	r3, [pc, #40]	; (80003dc <_ZN3Spi3spi10pin_configEv+0x38>)
 80003b2:	60bb      	str	r3, [r7, #8]

		*gpioa_mode |= (2 << 10) | (2 << 12) | (2 << 14);
 80003b4:	68fb      	ldr	r3, [r7, #12]
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	f443 4228 	orr.w	r2, r3, #43008	; 0xa800
 80003bc:	68fb      	ldr	r3, [r7, #12]
 80003be:	601a      	str	r2, [r3, #0]
		*gpiod_mode |= (1 << 14);
 80003c0:	68bb      	ldr	r3, [r7, #8]
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80003c8:	68bb      	ldr	r3, [r7, #8]
 80003ca:	601a      	str	r2, [r3, #0]
	}
 80003cc:	bf00      	nop
 80003ce:	3714      	adds	r7, #20
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bc80      	pop	{r7}
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	40020000 	.word	0x40020000
 80003dc:	40020c00 	.word	0x40020c00

080003e0 <_ZN3Spi3spi12pull_ss_highEv>:
		uint32_t *odr = (uint32_t*)0x40020c14;
		*odr ^= ( 1 << 7 );
	}

	void SPI_t::pull_ss_high()
	{
 80003e0:	b480      	push	{r7}
 80003e2:	b085      	sub	sp, #20
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
		uint32_t *odr = (uint32_t*)0x40020c14;
 80003e8:	4b06      	ldr	r3, [pc, #24]	; (8000404 <_ZN3Spi3spi12pull_ss_highEv+0x24>)
 80003ea:	60fb      	str	r3, [r7, #12]
		*odr |= (1 << 7);
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80003f4:	68fb      	ldr	r3, [r7, #12]
 80003f6:	601a      	str	r2, [r3, #0]
	}
 80003f8:	bf00      	nop
 80003fa:	3714      	adds	r7, #20
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bc80      	pop	{r7}
 8000400:	4770      	bx	lr
 8000402:	bf00      	nop
 8000404:	40020c14 	.word	0x40020c14

08000408 <_ZN3Spi3spi11pull_ss_lowEv>:

	void SPI_t::pull_ss_low()
	{
 8000408:	b480      	push	{r7}
 800040a:	b085      	sub	sp, #20
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
		uint32_t *odr = (uint32_t*)0x40020c14;
 8000410:	4b06      	ldr	r3, [pc, #24]	; (800042c <_ZN3Spi3spi11pull_ss_lowEv+0x24>)
 8000412:	60fb      	str	r3, [r7, #12]
		*odr &= ~(1 << 7);
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	601a      	str	r2, [r3, #0]
	}
 8000420:	bf00      	nop
 8000422:	3714      	adds	r7, #20
 8000424:	46bd      	mov	sp, r7
 8000426:	bc80      	pop	{r7}
 8000428:	4770      	bx	lr
 800042a:	bf00      	nop
 800042c:	40020c14 	.word	0x40020c14

08000430 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000430:	480d      	ldr	r0, [pc, #52]	; (8000468 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000432:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000434:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000438:	480c      	ldr	r0, [pc, #48]	; (800046c <LoopForever+0x6>)
  ldr r1, =_edata
 800043a:	490d      	ldr	r1, [pc, #52]	; (8000470 <LoopForever+0xa>)
  ldr r2, =_sidata
 800043c:	4a0d      	ldr	r2, [pc, #52]	; (8000474 <LoopForever+0xe>)
  movs r3, #0
 800043e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000440:	e002      	b.n	8000448 <LoopCopyDataInit>

08000442 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000442:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000444:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000446:	3304      	adds	r3, #4

08000448 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000448:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800044a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800044c:	d3f9      	bcc.n	8000442 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800044e:	4a0a      	ldr	r2, [pc, #40]	; (8000478 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000450:	4c0a      	ldr	r4, [pc, #40]	; (800047c <LoopForever+0x16>)
  movs r3, #0
 8000452:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000454:	e001      	b.n	800045a <LoopFillZerobss>

08000456 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000456:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000458:	3204      	adds	r2, #4

0800045a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800045a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800045c:	d3fb      	bcc.n	8000456 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800045e:	f000 f811 	bl	8000484 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000462:	f7ff fec1 	bl	80001e8 <main>

08000466 <LoopForever>:

LoopForever:
    b LoopForever
 8000466:	e7fe      	b.n	8000466 <LoopForever>
  ldr   r0, =_estack
 8000468:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800046c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000470:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000474:	080004ec 	.word	0x080004ec
  ldr r2, =_sbss
 8000478:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800047c:	2000001c 	.word	0x2000001c

08000480 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000480:	e7fe      	b.n	8000480 <ADC_IRQHandler>
	...

08000484 <__libc_init_array>:
 8000484:	b570      	push	{r4, r5, r6, lr}
 8000486:	4d0d      	ldr	r5, [pc, #52]	; (80004bc <__libc_init_array+0x38>)
 8000488:	4c0d      	ldr	r4, [pc, #52]	; (80004c0 <__libc_init_array+0x3c>)
 800048a:	1b64      	subs	r4, r4, r5
 800048c:	10a4      	asrs	r4, r4, #2
 800048e:	2600      	movs	r6, #0
 8000490:	42a6      	cmp	r6, r4
 8000492:	d109      	bne.n	80004a8 <__libc_init_array+0x24>
 8000494:	4d0b      	ldr	r5, [pc, #44]	; (80004c4 <__libc_init_array+0x40>)
 8000496:	4c0c      	ldr	r4, [pc, #48]	; (80004c8 <__libc_init_array+0x44>)
 8000498:	f000 f818 	bl	80004cc <_init>
 800049c:	1b64      	subs	r4, r4, r5
 800049e:	10a4      	asrs	r4, r4, #2
 80004a0:	2600      	movs	r6, #0
 80004a2:	42a6      	cmp	r6, r4
 80004a4:	d105      	bne.n	80004b2 <__libc_init_array+0x2e>
 80004a6:	bd70      	pop	{r4, r5, r6, pc}
 80004a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80004ac:	4798      	blx	r3
 80004ae:	3601      	adds	r6, #1
 80004b0:	e7ee      	b.n	8000490 <__libc_init_array+0xc>
 80004b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80004b6:	4798      	blx	r3
 80004b8:	3601      	adds	r6, #1
 80004ba:	e7f2      	b.n	80004a2 <__libc_init_array+0x1e>
 80004bc:	080004e4 	.word	0x080004e4
 80004c0:	080004e4 	.word	0x080004e4
 80004c4:	080004e4 	.word	0x080004e4
 80004c8:	080004e8 	.word	0x080004e8

080004cc <_init>:
 80004cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ce:	bf00      	nop
 80004d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004d2:	bc08      	pop	{r3}
 80004d4:	469e      	mov	lr, r3
 80004d6:	4770      	bx	lr

080004d8 <_fini>:
 80004d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004da:	bf00      	nop
 80004dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004de:	bc08      	pop	{r3}
 80004e0:	469e      	mov	lr, r3
 80004e2:	4770      	bx	lr
